fmod SCALAR is
    pr CONVERSION .  --- Required for converting between different types
    pr EXT-BOOL .    --- Extended Boolean operations

    vars R R1 R2 : Rat .                                       --- Declare variables of type Rat (rational)
    vars S S1 S2 S3 S4 : Scalar .                              --- Declare variables of type Scalar
    var N : Nat .                                              --- Declare a natural number variable

    sorts Scalar iNumber .                                     --- Define sorts for scalars(complex) & imaginary numbers
    subsort Rat iNumber < Scalar .  

    --- Imaginary unit
    op i : -> iNumber [ctor].                                 --- The imaginary unit i, representing sqrt(-1)

    --- Basic scalar operations
    op _.*_ : Scalar Scalar -> Scalar [comm assoc prec 32] .  --- Multiplication
    op _./_ : Scalar Scalar -> Scalar [prec 31] .             --- Division
    op _.+_ : Scalar Scalar -> Scalar [comm assoc prec 33] .  --- Addition
    op (_)^* : Scalar -> Scalar [prec 30] .                   --- Complex conjugate

    --- Comparative operators for scalars
    op _.>_ : Scalar Scalar -> Bool .                         --- Greater than
    op _.>=_ : Scalar Scalar -> Bool .                        --- Greater than or equal to
    op _.<_ : Scalar Scalar -> Bool .                         --- Less than
    op _.<=_ : Scalar Scalar -> Bool .                        --- Less than or equal to

    --- Error scalar 
    op errS : -> Scalar . 

    --- Functions to handle scalars
    op Sqrt : Scalar -> Scalar .                               --- Square root
    op Abs : Scalar -> Scalar .                                --- Absolute value
    op Pow : Scalar Rat -> Scalar .                            --- Power function (R^n)

    --- Imaginary properties
    eq i .* i = -1 .                                           --- Definition of complex i
    eq Abs(i) = 1 .                                            --- Absolute value of i is 1

    --- Rational properties.
    eq R1 .* R2 = R1 * R2 .                                   ---  multiplication
    eq R1 ./ R2 = R1 / R2 .                                   ---  division
    eq R1 .+ R2 = R1 + R2 .                                   ---  addition
    eq R1 .< R2 = R1 < R2 .                                   --- Less than comparison
    eq R1 .<= R2 = R1 <= R2 .                                 --- Less than or equal to comparison
    eq R1 .> R2 = R1 > R2 .                                   --- Greater than comparison
    eq R1 .>= R2 = R1 >= R2 .                                 --- Greater than or equal to comparison

    --- Absolute value properties
    eq Abs((Abs(S))) = Abs(S) .         
    eq Abs((Pow(Abs(S), N))) = Pow(Abs(S), N) . 

    --- Power properties
    eq Pow(R1, R2) = (R1)^(R2) .                       

   --- Relation between conjugate, absolute value and power
    eq S .* (S)^* = Pow(Abs(S), 2) .                         --- c . c* = |c|^2

   --- distributive properties
   
    eq S1 .* (S2 .+ S3) = S1 .* S2 .+ S1 .* S3 .

    --- Multiplicative properties for scalars
    eq S .* 1 = S .                                      
    eq S .* 0 = 0 .                                        
    
    ceq S .* (1 ./ S) = 1 
     if not S :: Rat .  

    ceq (1 ./ S1) .* (1 ./ S2) = 1 ./ (S1 .* S2)
     if not S1 :: Rat /\ not S2 :: Rat .

    ceq S1 .* (1 ./ (S1 .* S2)) = 1 ./ S2
     if not S1 :: Rat /\ not S2 :: Rat .
   
    --- constructing normal form:
    ceq (S .* R1 .+ S .* R2) = S .* (R1 .+ R2) 
     if not S :: Rat .

    ceq S .+ R .* S = S .* (R .+ 1) 
     if not S :: Rat .

    ceq S .+ S = S .* 2 
     if not S :: Rat .

    --- constructing normal form:
    ceq S1 ./ S2 = S1 .* (1 ./ S2) 
     if not S1 :: Rat .

    ceq R ./ S = R .* (1 ./ S) 
     if not S :: Rat /\ R =/= 1 .

  --- additive properties
    eq S .+ 0 = S .

  --- fraction properties
    eq 0 ./ S = 0 .

    eq S ./ 1 = S .

    ceq S ./ 0 = errS 
     if S =/= 0 .

    eq 1 ./ (1 ./ S) =  S .

    eq 1 ./ (S1 .* (1 ./ S2)) =  S2 .* (1 ./ S1) .

    eq 1 ./ (S .* (R1 / R2)) =  (R2 / R1) .* (1 ./ S) .

    --- Sqrt calculation
    eq Sqrt(- N) = i .* Sqrt(N) .
    eq Sqrt(1) = 1 .
    eq Sqrt(0) = 0 .
    eq Sqrt(S) .* Sqrt(S) = S .
    eq Sqrt(R1 / R2) = Sqrt(R1) .* (1 ./ Sqrt(R2)) .
    ceq Sqrt(1 ./ S) = 1 ./ Sqrt(S) 
     if not S :: Rat .

    ceq Sqrt(S1 .* S2) = Sqrt(S1) .* Sqrt(S2) 
     if not S1 :: Rat or-else not S2 :: Rat .

    eq Sqrt(S) .* (R ./ S) = R .* (1 ./ Sqrt(S)) .
    eq Sqrt(S1) .* (S2 / S1) = S2 .* (1 ./ Sqrt(S1)) .
    eq Sqrt(Pow(Abs(S), 2)) = Abs(S) .
    eq Sqrt(Pow(Pow(S, 2), 2)) = Pow(S, 2) .

    --- transpose of Sqrt
    eq (Sqrt(R))^* = Sqrt(R) .
    eq (S1 .* S2)^* = (S1)^* .* (S2)^* .
    eq (S1 ./ S2)^* = (S1)^* ./ (S2)^* .
    eq (S1 .+ S2)^* = (S1)^* .+ (S2)^* .
    eq (R)^* = R .
endfm

fmod DIRAC is
    pr SCALAR .
    sorts Ket Bra .

    ops |0> |1> : -> Ket [ctor] .
    ops <0| <1| : -> Bra [ctor] .
    ops |+> |-> : -> Ket [ctor] .
    ops <+| <-| : -> Bra [ctor] .
    

endfm

fmod MATRIX is
  pr DIRAC .
  pr SCALAR .
  pr NAT .

  sorts Vector Matrix .
  subsort Ket < Vector .
  subsorts Vector Bra < Matrix .

  vars M M1 M2 M3 M4 : Matrix .
  vars V1 V2 V3 V4 : Vector .
  vars S S1 S2 : Scalar .
  vars a c K1 K2 : Ket .
  var N : Nat .
  var b : Bra .

  --- zero matrix
  op O : -> Matrix [ctor] .

  --- identity matrix
  op I : -> Matrix [ctor] .

  --- fake matrix
  op nil : -> Matrix [ctor] .

  --- error matrix
  op errM : -> Matrix [ctor] .

  --- scalar multiplication with matrix
  op _._ : Scalar Vector -> Vector [prec 31] .
  op _._ : Scalar Matrix -> Matrix [prec 31] .

  --- matrix product
  op _x_ : Matrix Matrix -> Matrix [assoc prec 31] .

  --- matrix addition
  op _+_ : Vector Vector -> Vector [comm assoc prec 33] .
  op _+_ : Matrix Matrix -> Matrix [comm assoc prec 33] .

  --- tensor product
  op _(x)_ : Vector Vector -> Vector [assoc prec 31] .
  op _(x)_ : Matrix Matrix -> Matrix [assoc prec 31] .

  --- dagger
  op (_)^+ : Matrix -> Matrix [prec 30] .

 --- scalar product
  op SP(_,_) : Vector Vector -> Scalar .

 ---counting number of vectors in a tensor product
  op count : Vector -> Nat . 

  eq count(V1 (x) V2) = count(V1) + count(V2) . ---Recursive case: count of a tensor product is the sum of counts of each part
  eq count(S . V1) = count(V1) . ---Case for scalar multiplication: count is unaffected by scalar
  eq count(S . V1 + S2 . V2) = count(S . V1) [owise] .
  eq count(V1 + S2 . V2) = count(V1) [owise] .
  eq count(S . V1 + V2) = count(S . V1) [owise] .
  eq count(V1 + V2) = count(V1) [owise] .
  eq count(K1) = 1 . ---Base case: count of a single vector is 1


 --- out of a tensor product of vectors choosing one particular vector
  op get-vector : Vector Nat -> Vector .

  ---base case
  ceq get-vector(S . V1, 1) = V1 if count(V1) = 1 . ---reason for keeping this equation first
  ceq get-vector(V1, 1) = V1 if count(V1) = 1 .
  
  ---base case for tensor product
  eq get-vector(V1 (x) V2, 1) = V1 .
  eq get-vector(S . V1 (x) V2, 1) = V1 .
  eq get-vector(V1 (x) S . V2, 1) = V1 .
  eq get-vector(S1 . V1 (x) S2 . V2, 1) = V1 .

 ---sum of vectors
  ceq get-vector(V1 + V2, N) = get-vector(V1, N) 
  if get-vector(V1, N) == get-vector(V2, N) . 

  ceq get-vector(S1 . V1 + S2 . V2, N) = get-vector(V1, N) 
  if get-vector(V1, N) == get-vector(V2, N) . 

  ceq get-vector(V1 + S2 . V2, N) = get-vector(V1, N) 
  if get-vector(V1, N) == get-vector(V2, N) . 
  
  ceq get-vector(S1 . V1 + V2, N) = get-vector(V1, N) 
  if get-vector(V1, N) == get-vector(V2, N) . 

  ---in general
  eq get-vector(V1 (x) V2, N) = get-vector(V2, (N - 1)) [owise] .
  eq get-vector(S . V1 (x) V2, N) = get-vector(V2, (N - 1)) [owise] .
  eq get-vector(V1 (x) S . V2, N) = get-vector(V2, (N - 1)) [owise] .
  eq get-vector(S1 . V1 (x) S2 . V2, N) = get-vector(V2, (N - 1)) [owise] .

  
op replace-zero : Vector Nat -> Vector . ---replacing nth place of vector in tensor product with vector 0

--- Case 1: Single vector without scalar multiplication
ceq replace-zero(V1 (x) V2, 1) = |0> (x) V2 if count(V1) = 1 . ---Replace the first vector in the tensor product with |0>
ceq replace-zero(S . V1, 1) = S . |0> if count(V1) = 1 [owise] .
ceq replace-zero(V1, 1) = |0> if count(V1) = 1 [owise] .
ceq replace-zero(S . (V1 (x) V2), 1) = S . (|0> (x) V2) if count(V1) = 1 .

---
eq replace-zero(V1 (x) V2, N) = V1 (x) replace-zero(V2, N - 1) . ---Recursive case for nth position
eq replace-zero(S . (V1 (x) V2), N) = S . (V1 (x) replace-zero(V2, N - 1)) .
eq replace-zero(S1 . V1 (x) S2 . V2, N) = S1 . V1 (x) replace-zero(S2 . V2, N - 1) . 
eq replace-zero(V1 (x) S2 . V2, N) = V1 (x) replace-zero(S2 . V2, N - 1) . 

--- Case 3: Sum of vectors (iterative)
eq replace-zero(V1 + V2, N) = replace-zero(V1, N) + replace-zero(V2, N) .
eq replace-zero(S1 . V1 + S2 . V2, N) = S1 . replace-zero(V1, N) + S2 . replace-zero(V2, N) .
eq replace-zero(S1 . V1 + V2, N) = S1 . replace-zero(V1, N) + replace-zero(V2, N) .
eq replace-zero(V1 + S2 . V2, N) = replace-zero(V1, N) + S2 . replace-zero(V2, N) .

 ---Rules for Single Kets
  eq SP(|0>, |0>) = 1 .
  eq SP(|+>, |+>) = 1 .
  eq SP(|1>, |1>) = 1 .
  eq SP(|->, |->) = 1 .
  eq SP(|+>, |->) = 0 .
  eq SP(|->, |+>) = 0 .
  eq SP(|1>, |0>) = 0 .
  eq SP(|0>, |1>) = 0 .
  eq SP(|+>, |0>) = 1 ./ Sqrt(2) .
  eq SP(|+>, |1>) = 1 ./ Sqrt(2) .
  eq SP(|->, |0>) = 1 ./ Sqrt(2) .
  eq SP(|->, |1>) = -1 ./ Sqrt(2) .
  eq SP(|0>, |+>) = 1 ./ Sqrt(2) .
  eq SP(|1>, |+>) = 1 ./ Sqrt(2) .
  eq SP(|0>, |->) = 1 ./ Sqrt(2) .
  eq SP(|1>, |->) = -1 ./ Sqrt(2) .

   ---Rules for double Kets
  eq SP(|0> (x) |0>, |0> (x) |0>) = 1 .
  eq SP(|+> (x) |+>, |+> (x) |+>) = 1 .
  eq SP(|1> (x) |1>, |1> (x) |1>) = 1 .
  eq SP(|-> (x) |->, |-> (x) |->) = 1 .

  ---General recursive rules for tensor products
  eq SP(|0> (x) V1, |0> (x) V2) = SP(V1, V2) .
  eq SP(|1> (x) V1, |1> (x) V2) = SP(V1, V2) .
  eq SP(|0> (x) V1, |0> (x) V1) = 1 .
  eq SP(|0> (x) V1, |1> (x) V2) = 0 [owise] .
  eq SP(|1> (x) V1, |0> (x) V2) = 0 [owise] .

  ---In general tensor product rules
  eq SP(S1 . V1, V2) = (S1)^* .* SP(V1, V2) .
  eq SP(V1, S2 . V2) = S2 .* SP(V1, V2) .
  eq SP(V1 + V2, V3) = SP(V1, V3) .+ SP(V2, V3) .
  eq SP(V1, V2 + V3) = SP(V1, V2) .+ SP(V1, V3) .
  eq SP(K1 (x) V1, K2 (x) V2) = SP(K1, K2) .* SP(V1, V2) .
  eq (SP(V1, V2))^* = SP(V2, V1) .

    --- zero matrix properties
    eq 0 . M = O .
    eq S . O = O .
    eq 1 . M = M .

    eq O + M = M .
    eq M + O = M .

    eq O x M = O .
    eq M x O = O .

    eq M (x) O = O .
    eq O (x) M = O .

    --- nil matrix
    eq nil (x) M = M .
    eq M (x) nil = M .
    eq M + nil = M .
    eq S . nil = nil .

    --- identity matrix properties
    eq I x M = M .
    eq M x I = M .
    eq <0| x |0> = I .
    eq <1| x |1> = I .
    eq <0| x |1> = O .
    eq <1| x |0> = O .
    eq <+| x |+> = I .
    eq <-| x |-> = I .
    eq <-| x |+> = O .
    eq <+| x |-> = O .
    eq <0| x |+> = (1 ./ Sqrt(2)) . I . ---check
    eq <1| x |+> = (1 ./ Sqrt(2)) . I . ---check
    eq <0| x |-> = (1 ./ Sqrt(2)) . I . ---check
    eq <1| x |-> = (-1 .* 1 ./ Sqrt(2)) . I . ---check


    eq (|+> x <+|) x |0> = (SP(|+>, |0>)) . |+> .
    eq (|+> x <+|) x |1> = (SP(|+>, |1>)) . |+> .
    eq (|+> x <+|) x |+> = (SP(|+>, |+>)) . |+> .
    eq (|+> x <+|) x |-> = (SP(|+>, |->)) . |+> .

    eq (|0> x <0|) x |+> = (SP(|0>, |+>)) . |0> .
    eq (|0> x <0|) x |-> = (SP(|0>, |->)) . |0> .
    eq (|0> x <0|) x |1> = (SP(|0>, |1>)) . |0> .
    eq (|0> x <0|) x |0> = (SP(|0>, |0>)) . |0> .
    eq (|-> x <-|) x |0> = (SP(|->, |0>)) . |-> .
    eq (|-> x <-|) x |1> = (SP(|->, |1>)) . |-> .
    eq (|-> x <-|) x |+> = (SP(|->, |+>)) . |-> .
    eq (|-> x <-|) x |-> = (SP(|->, |->)) . |-> .
    eq (|1> x <1|) x |+> = (SP(|1>, |+>)) . |1> .
    eq (|1> x <1|) x |-> = (SP(|1>, |->)) . |1> .
    eq (|1> x <1|) x |1> = (SP(|1>, |1>)) . |1> .
    eq (|1> x <1|) x |0> = (SP(|1>, |0>)) . |1> .

    --- dagger properties for single qubit
    eq (I)^+ = I .
    eq (O)^+ = O .
    eq (|0>)^+ = <0| .
    eq (|1>)^+ = <1| .
    eq (<0|)^+ = |0> .
    eq (<1|)^+ = |1> .
    eq (|+>)^+ = <+| .
    eq (|->)^+ = <-| .
    eq (<+|)^+ = |+> .
    eq (<-|)^+ = |-> .

  ---dagger properties for two qubit system
    eq (I (x) I)^+ = I .
    eq (O (x) O)^+ = O .
    eq (|0> (x) |0>)^+ = <0| (x) <0| .
    eq (|1> (x) |1>)^+ = <1| (x) <1| .
    eq (<0| (x) <0|)^+ = |0> (x) |0> .
    eq (<1| (x) <1|)^+ = |1> (x) |1> .
    eq (|+> (x) |+>)^+ = <+| (x) <+| .
    eq (|-> (x) |->)^+ = <-| (x) <-| .
    eq (<+| (x) <+|)^+ = |+> (x) |+> .
    eq (<-| (x) <-|)^+ = |-> (x) |-> .

  ---dagger properties for n qubit system
    eq (|0> (x) V1)^+ = <0| (x) (V1)^+ .
    eq (|1> (x) V1)^+ = <1| (x) (V1)^+ .
    eq (|+> (x) V1)^+ = <+| (x) (V1)^+ .
    eq (|-> (x) V1)^+ = <-| (x) (V1)^+ .
    eq (V2 (x) V1)^+ = (V2)^+ (x) (V1)^+ .

  ---FOR GENERAL MATRICES
    eq (S . M)^+ = ((S)^*) . (M)^+ .
    eq (M1 x M2)^+ = (M2)^+ x (M1)^+ .
    eq (M1 + M2)^+ = (M1)^+ + (M2)^+ .
    eq ((M)^+)^+ = M .

    --- ditributive properties
    eq M1 x (M2 + M3) = M1 x M2 + M1 x M3 .
    eq (M1 + M2) x M3 = M1 x M3 + M2 x M3 .

    --- additive normal forms
    eq S . (M1 + M2) = S . M1 + S . M2 .
    eq (S1 . M) + (S2 . M) = (S1 .+ S2) . M .
    eq (S1 . M) + M = (S1 .+ 1) . M .
    eq M + M = 2 . M .

    --- multiplicative normal forms
    eq (S1 . M1) x (S2 . M2) = (S1 .* S2) . (M1 x M2) .
    eq (S . M1) x M2 = S . (M1 x M2) .
    eq M1 x (S . M2) = S . (M1 x M2) .

    --- scalar normal forms
    eq S1 . (S2 . M) = (S1 .* S2) . M .

    --- tensor product normal forms
    --- eq (S1 . M1) (x) (S2 . M2) = (S1 .* S2) . (M1 (x) M2) . --- may ignore
    eq (S . M1) (x) M2 = S . (M1 (x) M2) .
    eq M1 (x) (S . M2) = S . (M1 (x) M2) .

    --- tensor product properties
    eq (M1 (x) M2) x (M3 (x) M4) = (M1 x M3) (x) (M2 x M4) .
    eq M1 (x) (M2 + M3) = M1 (x) M2 + M1 (x) M3 .
    eq (M1 + M2) (x) M3 = M1 (x) M3 + M2 (x) M3 .

    --- basic matrices
    ops B0 B1 B2 B3 P0 P1 : -> Matrix .
    eq B0 = |0> x <0| .
    eq B1 = |0> x <1| .
    eq B2 = |1> x <0| .
    eq B3 = |1> x <1| .
    eq P0 = B0 . ---why P0 is defined, we do not know
    eq P1 = B3 . ---why P1 is defined, we do not know
 

    --- basic gates
    ops X Y Z H S T CX CY CZ SWAP CCX CCZ CSWAP : -> Matrix .
    eq X = B1 + B2 .
       --- eq |+> x <+| = (1 ./ 2) . (I + B1 + B2) .
    eq Y = ((-1) .* i) . B1 + i . B2 .
    eq Z = B0  + (-1) . B3 .
    eq H = 1 ./ Sqrt(2) . B0 + 1 ./ Sqrt(2) . B1 + 1 ./ Sqrt(2) . B2 + (-1) ./ Sqrt(2) . B3 .
    eq S = B0 + i . B3 .
    eq T = B0 + ((1 + i) ./ Sqrt(2)) . B3 .
    eq CX = B0 (x) I + B3 (x) X .
    eq CY = B0 (x) I + B3 (x) Y .
    eq CZ = B0 (x) I + B3 (x) Z .
    --- SWAP(N1, N2) = CX(N1, N2) x CX(N2, N1) x CX(N1, N2)
    eq SWAP = (B0 (x) I + B3 (x) X) x (I (x) B0 + X (x) B3) x (B0 (x) I + B3 (x) X) .
    --- CCX = B0(x)I(x)I + B3(x)B0(x)I + B3(x)B3(x)B1 + B3(x)B3(x)B2
    eq CCX = B0 (x) I (x) I + B3 (x) CX . 
    --- CCZ = B0(x)I(x)I + B3(x)B0(x)I + B3(x)B3(x)B0 + (-1) . B3(x)B3(x)B3
    eq CCZ = B0 (x) I (x) I + B3 (x) CZ . 
    --- CSWAP = B0(x)I(x)I + B3(x)B0(x)B0 + B3(x)B1(x)B2 + B3(x)B2(x)B1 + B3(x)B3(x)B3
    eq CSWAP = B0 (x) I (x) I + B3 (x) SWAP .

   eq (1 ./ Sqrt(2)) . |0> + (1 ./ Sqrt(2)) . |1> = |+> . 
   eq (1 ./ Sqrt(2)) . |0> + (-1 .* 1 ./ Sqrt(2)) . |1> = |-> . 
   eq (-1 .* 1 ./ Sqrt(2)) . |0> + (1 ./ Sqrt(2)) . |1> = -1 . |-> . 
   eq (i .* 1 ./ Sqrt(2)) . |0> + (i .* 1 ./ Sqrt(2)) . |1> = i . |+> .
   eq (i .* 1 ./ Sqrt(2)) . |1> + (i .* -1 .* 1 ./ Sqrt(2)) . |0> = i . (-1 . |->) .
   eq (i .* -1 .* 1 ./ Sqrt(2)) . |0> + (i .* -1 .* 1 ./ Sqrt(2)) . |1> = i . (-1 . |+>) .
  



endfm

fmod QUBIT is
    pr MATRIX .
    pr NAT-LIST .

    sorts OneQubit EnQubit Qubit QState .
    subsort OneQubit < EnQubit < Qubit < QState .

    vars N N1 N2 N3 : Nat .
    var V V1 V2 : Vector .
    var NL : NatList .
    var Q1 : Qubit .

    --- empty and error qubit definitions
    op emp : -> Qubit [ctor] .
    op errQ : -> Qubit [ctor] . ---do not know where error qubit is used

    --- Qubit construction
    op (q[_]:_) : NatList Vector -> Qubit .
    mb(q[N]: V) : OneQubit .          --- Single qubit representation
    mb(q[N1 N2 NL]: V) : EnQubit .    --- Multiple qubit representation  

    --- remove unnecessary qubits
    eq (q[nil]: V) = emp .

    op __ : Qubit Qubit -> Qubit [ctor assoc comm id: emp] .           --- Combine two qubits

endfm
