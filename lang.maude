in main.maude

fmod Q-SYNTAX is
    pr QUBIT .
    pr MATRIX .
    pr DIRAC .
    pr BOOL .

    sorts AtomicProg D Prog .
    
    sorts Conf QConf ListQConf .
    subsort Conf < QConf .
    subsort Qubit < QConf .
    subsort QConf < ListQConf .
    subsort AtomicProg < D < Prog .


    vars N N1 N2 N3 N4 n : Nat .
    vars M M1 M2 M3 M4 P : Matrix .
    vars NL NL1 NL2 NL3 NL4 NL5 NL6 : NatList .
    var QS Q Q1 Q2 u u1 u2 Q3 : Qubit .
    vars S S1 S2 Prob : Scalar .
    vars Ket Ket1 Ket2 : Ket .
    vars V V1 V2 V3 : Vector .
    var C C1 C2 C3 C4 : Prog .
    var Tail Tail1 : ListQConf .
    var CS : QConf .
    var d D1 D2 : D .
  
--- atomic programs
    op I`(_`) : Nat -> AtomicProg [ctor] .         --- Identity gate
    op X`(_`) : Nat -> AtomicProg [ctor] .         --- Pauli-X gate
    op Y`(_`) : Nat -> AtomicProg [ctor] .         --- Pauli-Y gate 
    op Z`(_`) : Nat -> AtomicProg [ctor] .
    op H`(_`) : Nat -> AtomicProg [ctor] .
    op CX`(_,_`) : Nat Nat -> AtomicProg [ctor] .
    op CZ`(_,_`) : Nat Nat -> AtomicProg [ctor] .
    op CCX`(_,_,_`) : Nat Nat Nat -> AtomicProg [ctor] .
    op SWAP`(_,_`) : Nat Nat -> AtomicProg [ctor] .


    
--- D programs
    op skip : -> D [ctor] .                         --- constant program
    op _;_ : D D -> D [ctor prec 25 gather (e E)] . --- composition
    op MEAS-await`(_`) : Nat -> D .                       ---measurement in basis 0 and 1
    op Measure-await`(_,_,_`) : Nat D D -> D .      ---measuring and then applying programs C1 and C2
   
    
--- programs                                 
    op _+_ : Prog Prog -> Prog [ctor prec 26 gather (e E)] .   --- non-deterministic choices
    op _||_ : Prog Prog -> Prog [ctor] . 
    op _;_ : Prog Prog -> Prog [ctor prec 25 gather (e E)] .   --- TO SEE WHERE THE AUTHOR DEFINED THIS OPERATOR                                                       
    op await`(_,_`) : Nat D -> Prog .                        --- AWAIT COMMAND,                   
    op Measure`(_,_,_`) : Nat Prog Prog -> Prog . 
    op MEAS`(_`) : Nat -> Prog . 

--- formulas
    sorts AtomicFormula Formula .
    subsort AtomicFormula < Formula .

    
--- quantum dynamic logic formulas
    op _/\_ : Formula Formula -> Formula [ctor assoc comm] .   --- conjunction formula
    op neg_ : Formula -> Formula .                             --- negation formula
    op `[_`]_ : Prog Formula -> Formula [ctor] .               --- box formula
    op _? : Formula -> Prog [ctor prec 24] . 

--- testable properties
    op P`(_,_`) : Nat Matrix -> AtomicFormula [ctor] .       

  ---Configuration
    op <_,_> : Prog Qubit -> Conf .
    op nilList : -> ListQConf [ctor] .
    op _,_ : ListQConf ListQConf -> ListQConf [ctor assoc id: nilList] .
   
  ---smallStep
    op smallStep : ListQConf -> ListQConf . ---because smallstep is also defined for smallstep((C1,Q1), (C2,Q2)) = smallstep(C1,Q1), smallstep(C2,Q2)
    op bigStep : ListQConf -> ListQConf .
   
    ---eq (Tail, nilList) = Tail . this producing an error in teleport protocol
    ---eq (nilList, Tail) = Tail .


    --- applying hadmard gate
    op _.H(_) : ListQConf Nat -> ListQConf .
    ceq ((q[NL1 N NL2]: V) QS).H(N) = (q[NL1 N NL2]: M x V) QS
    if M := I[size(NL1)] (x) H (x) I[size(NL2)] .

    --- applying I gate
    op _.I(_) : ListQConf Nat -> ListQConf .
    eq (QS).I(N) = QS .

    --- applying X gate
    op _.X(_) : ListQConf Nat -> ListQConf .
    ceq ((q[NL1 N NL2]: V) QS).X(N) = (q[NL1 N NL2]: M x V) QS
    if M := I[size(NL1)] (x) X (x) I[size(NL2)] .

    --- applying Y gate
    op _.Y(_) : ListQConf Nat -> ListQConf .
    ceq ((q[NL1 N NL2]: V) QS).Y(N) = (q[NL1 N NL2]: M x V) QS
    if M := I[size(NL1)] (x) Y (x) I[size(NL2)] .                  

    --- applying Z gate
    op _.Z(_) : ListQConf Nat -> ListQConf .
    ceq ((q[NL1 N NL2]: V) QS).Z(N) = (q[NL1 N NL2]: M x V) QS
    if M := I[size(NL1)] (x) Z (x) I[size(NL2)] .

    ---applying CCX gate
  op _.CCX(_,_,_) : ListQConf Nat Nat Nat -> ListQConf .

  --- Case 1: All Three Qubits Are in a Single State in Increasing Order
   ceq ((q[NL1 N1 NL2 N2 NL3 N3 NL4]: V) QS).CCX(N1, N2, N3)
   = ((q[NL1 N1 NL2 N2 NL3 N3 NL4]: M x V)) QS
   if M1 := I[size(NL1)] (x) B0 (x) I[size(NL2)] (x) B0 (x)
        I[size(NL3)] (x) I (x) I[size(NL4)]
   /\ M2 := I[size(NL1)] (x) B0 (x) I[size(NL2)] (x) B3 (x)
        I[size(NL3)] (x) I (x) I[size(NL4)]
   /\ M3 := I[size(NL1)] (x) B3 (x) I[size(NL2)] (x) B0 (x)
        I[size(NL3)] (x) I (x) I[size(NL4)]
   /\ M4 := I[size(NL1)] (x) B3 (x) I[size(NL2)] (x) B3 (x)
        I[size(NL3)] (x) X (x) I[size(NL4)]
/\ M := M1 + M2 + M3 + M4 .


    --- applying CX gate
    op _.CX(_,_) : ListQConf Nat Nat -> ListQConf .
    ceq ((q[NL1 N1 NL2]: V1) (q[NL3 N2 NL4]: V2) QS).CX(N1, N2)
    = ((q[NL1 N1 NL2 NL3 N2 NL4]: M x V)) QS
    if V := V1 (x) V2
    /\ M1 := I[size(NL1)] (x) B0 (x) I[size(NL2)] (x)
            I[size(NL3)] (x) I (x) I[size(NL4)]
    /\ M2 := I[size(NL1)] (x) B3 (x) I[size(NL2)] (x)
            I[size(NL3)] (x) X (x) I[size(NL4)]
    /\ M := M1 + M2 .

    ceq ((q[NL1 N1 NL2 N2 NL3]: V) QS).CX(N1, N2) = ((q[NL1 N1 NL2 N2 NL3]: M x V)) QS
    if M1 := I[size(NL1)] (x) B0 (x) I[size(NL2)] (x) I (x) I[size(NL3)]
    /\ M2 := I[size(NL1)] (x) B3 (x) I[size(NL2)] (x) X (x) I[size(NL3)]
    /\ M := M1 + M2 .

    ceq ((q[NL1 N2 NL2 N1 NL3]: V) QS).CX(N1, N2) = ((q[NL1 N2 NL2 N1 NL3]: M x V)) QS
    if M1 := I[size(NL1)] (x) I (x) I[size(NL2)] (x) B0 (x) I[size(NL3)]
    /\ M2 := I[size(NL1)] (x) X (x) I[size(NL2)] (x) B3 (x) I[size(NL3)]
    /\ M := M1 + M2 .


    --- applying CZ gate
    op _.CZ(_,_) : ListQConf Nat Nat -> ListQConf .
    ceq ((q[NL1 N1 NL2]: V1) (q[NL3 N2 NL4]: V2) QS).CZ(N1, N2)
    = ((q[NL1 N1 NL2 NL3 N2 NL4]: M x V)) QS
    if V := V1 (x) V2
    /\ M1 := I[size(NL1)] (x) B0 (x) I[size(NL2)] (x)
            I[size(NL3)] (x) I (x) I[size(NL4)]
    /\ M2 := I[size(NL1)] (x) B3 (x) I[size(NL2)] (x)
            I[size(NL3)] (x) Z (x) I[size(NL4)]
    /\ M := M1 + M2 .

    ceq ((q[NL1 N1 NL2 N2 NL3]: V) QS).CZ(N1, N2) = ((q[NL1 N1 NL2 N2 NL3]: M x V)) QS
    if M1 := I[size(NL1)] (x) B0 (x) I[size(NL2)] (x) I (x) I[size(NL3)]
    /\ M2 := I[size(NL1)] (x) B3 (x) I[size(NL2)] (x) Z (x) I[size(NL3)]
    /\ M := M1 + M2 .

    ceq ((q[NL1 N2 NL2 N1 NL3]: V) QS).CZ(N1, N2) = ((q[NL1 N2 NL2 N1 NL3]: M x V)) QS
    if M1 := I[size(NL1)] (x) I (x) I[size(NL2)] (x) B0 (x) I[size(NL3)]
    /\ M2 := I[size(NL1)] (x) Z (x) I[size(NL2)] (x) B3 (x) I[size(NL3)]
    /\ M := M1 + M2 .

    --- applying SWAP gate
    --- SWAP = (B0 (x) I + B3 (x) X) x (I (x) B0 + X (x) B3) x (B0 (x) I + B3 (x) X) .
    op _.SWAP(_,_) : ListQConf Nat Nat -> ListQConf .
    ceq ((q[NL1 N1 NL2]: V1) (q[NL3 N2 NL4]: V2) QS).SWAP(N1, N2)
    = ((q[NL1 N1 NL2 NL3 N2 NL4]: M x V)) QS
    if V := V1 (x) V2
    /\ M1 := I[size(NL1)] (x) B0 (x) I[size(NL2)] (x)
             I[size(NL3)] (x) I (x) I[size(NL4)] +
             I[size(NL1)] (x) B3 (x) I[size(NL2)] (x)
             I[size(NL3)] (x) X (x) I[size(NL4)]
    /\ M2 := I[size(NL1)] (x) I (x) I[size(NL2)] (x)
             I[size(NL3)] (x) B0 (x) I[size(NL4)] +
             I[size(NL1)] (x) X (x) I[size(NL2)] (x)
             I[size(NL3)] (x) B3 (x) I[size(NL4)]
    /\ M := M1 x M2 x M1 .

    ceq ((q[NL1 N1 NL2 N2 NL3]: V) QS).SWAP(N1, N2)
    = ((q[NL1 N1 NL2 N2 NL3]: M x V)) QS
    if M1 := I[size(NL1)] (x) B0 (x) I[size(NL2)] (x) I (x) I[size(NL3)] +
             I[size(NL1)] (x) B3 (x) I[size(NL2)] (x) X (x) I[size(NL3)]
    /\ M2 := I[size(NL1)] (x) I (x) I[size(NL2)] (x) B0 (x) I[size(NL3)] +
             I[size(NL1)] (x) X (x) I[size(NL2)] (x) B3 (x) I[size(NL3)]
    /\ M := M1 x M2 x M1 .

    ceq ((q[NL1 N2 NL2 N1 NL3]: V) QS).SWAP(N1, N2)
    = ((q[NL1 N2 NL2 N1 NL3]: M x V)) QS
    if M1 := I[size(NL1)] (x) B0 (x) I[size(NL2)] (x) I (x) I[size(NL3)] +
             I[size(NL1)] (x) B3 (x) I[size(NL2)] (x) X (x) I[size(NL3)]
    /\ M2 := I[size(NL1)] (x) I (x) I[size(NL2)] (x) B0 (x) I[size(NL3)] +
             I[size(NL1)] (x) X (x) I[size(NL2)] (x) B3 (x) I[size(NL3)]
    /\ M := M1 x M2 x M1 .


  ---Applying tozero
  op _.tozero(_) : ListQConf Nat -> ListQConf .
   eq ((q[NL1 N NL2]: V) QS).tozero(n) = (q[NL1 N NL2]: replace-zero(V, n)) QS .  

   ceq (Q , Tail).tozero(n) = (((Q).tozero(n)) , ((Tail).tozero(n))) 
    if count-qconf(Tail) >= 1 .
    
  ceq (Tail).tozero(n) = (((Q1).tozero(n)) , ((Tail1).tozero(n))) 
    if (Q1, Tail1) := Tail /\ count-qconf(Tail) > 1 .
 

---counting number of vectors in a tensor product
  op count-qconf : ListQConf -> Nat . 
  eq count-qconf(nilList) = 0 .
  eq count-qconf(CS) = 1 [owise] .
  eq count-qconf(CS, Tail) = 1 + count-qconf(Tail) . 

 
  --- projections
  op _.P`(_,_`) : ListQConf Nat Matrix -> ListQConf . 

  eq ((q[NL1 N NL2]: V1) QS).P(N, P) = nilList [owise]. 

  ---eq ((q[NL1 N NL2]: (S . V1)) QS).P(N, P) = nilList [owise] . 

    ceq ((q[NL1 N NL2]: V1) QS).P(N, P) = (q[NL1 N NL2]: V2) QS
    if V2 := (I[size(NL1)] (x) (P x (P)^+) (x) I[size(NL2)]) x V1 . 

    ceq (Q , Tail).P(N, P) = (((Q).P(N, P)) , ((Tail).P(N, P))) 
     if count-qconf(Tail) >= 1 .
    
    ceq (Tail).P(N, P) = (((Q1).P(N, P)) , ((Tail1).P(N, P))) 
     if (Q1, Tail1) := Tail /\ count-qconf(Tail) > 1 .

----------------------------------------------------------
 
  op _.Measure`(_,_,_`) : ListQConf Nat Prog Prog -> ListQConf . -------defining measurementin sequential format
  eq ((q[NL1 N NL2]: V) (QS)).Measure(N, C1, C2) = smallStep(< C1 , (((q[NL1 N NL2]: V) (QS)).P(N, |0>)) >) , smallStep(< C2, (((q[NL1 N NL2]: V) (QS)).P(N, |1>)) >) .

-----------------------------------------------------------------------

op _.Measure-await`(_,_,_`) : ListQConf Nat D D -> ListQConf . -------defining measurementin sequential format
eq ((q[NL1 N NL2]: V) (QS)).Measure-await(N, D1, D2) = smallStep(< D1 , (((q[NL1 N NL2]: V) (QS)).P(N, |0>)) >) , smallStep(< D2, (((q[NL1 N NL2]: V) (QS)).P(N, |1>)) >) .

  
op _.MEAS`(_`) : ListQConf Nat -> ListQConf .   ---projecting on 0 or 1
eq (Q).MEAS(N) = (((Q).P(N, |0>)) , ((Q).P(N, |1>))) .

   
op _.MEAS-await`(_`) : ListQConf Nat -> ListQConf .   ---projecting on 0 or 1
eq (Q).MEAS-await(N) = (((Q).P(N, |0>)) , ((Q).P(N, |1>))) .


--- N -> I (x) I (x) ...
op I[_] : Nat -> Matrix .
eq I[0] = nil .
ceq I[N] = I (x) I[sd(N, 1)] if N > 0 .


endfm


fmod Q-SEMANTICS is
pr Q-SYNTAX .
pr QUBIT .
pr MATRIX .
pr DIRAC .
pr BOOL .

---SEMANTICS---

---subsort Vector < Qubit .

vars N N1 N2 N3 NL n Index Max : Nat .
vars C C1 C2 C3 C4 : Prog .
vars Q Q1 Q3 Q2 Q4 Q5 : Qubit .
var d : D .
vars u u1 u2 V1 V2 : Vector .
vars NL1 NL2 NL3 NL4 : NatList .
var CS : QConf . 
var Tail Accum L L1 L2 : ListQConf .
vars D1 D2 : D .



op None : -> QConf [ctor] . 
op NoneProg : -> Prog [ctor] .

-----------------------------------------------------

---smallStep for unitaries 
eq smallStep(< skip, Q >) = Q .
eq smallStep(< I(N), Q >) = Q . 
eq smallStep(< X(N), Q >) = (Q).X(N) .
eq smallStep(< Y(N), Q >) = (Q).Y(N) .
eq smallStep(< Z(N), Q >) = (Q).Z(N) .
eq smallStep(< H(N), Q >) = (Q).H(N) .
eq smallStep(< CX(N1,N2), Q >) = (Q).CX(N1, N2) .
eq smallStep(< SWAP(N1,N2), Q >) = (Q).SWAP(N1, N2) .
eq smallStep(< CZ(N1,N2), Q >) = (Q).CZ(N1, N2) .
eq smallStep(< CCX(N1,N2,N3), Q >) = (Q).CCX(N1, N2, N3) .

---small step semantics for measurement
eq smallStep(< MEAS-await(N), Q >) = (Q).MEAS-await(N) .  
eq smallStep(< MEAS(N), Q >) = (Q).MEAS(N) .  
eq smallStep(< Measure-await(N, D1, D2), Q >) = (Q).Measure-await(N, D1, D2) .
eq smallStep(< Measure(N, C1, C2), Q >) = (Q).Measure(N, C1, C2) .
eq smallStep(< C, nilList >) = nilList .

----------------------------------------------------------------------------------------------  


--- Select nth configuration from ListQConf
  op get-qconf : Nat ListQConf -> QConf .
  op get-qconf-helper : Nat ListQConf Nat -> QConf .

  eq get-qconf(N, Tail) = get-qconf-helper(N, Tail, 1) .  --- Start traversal with an initial position of 1
  ceq get-qconf-helper(N1, (CS, Tail), N2) = CS   --- Base case: If the current position matches N, return the head.
    if N1 == N2 .

  ceq get-qconf-helper(N1, (CS, Tail), N2) = get-qconf-helper(N1, Tail, N2 + 1)   --- Recursive case: Increment position and continue traversing.
    if N1 > N2 .

  eq get-qconf-helper(N1, nilList, N2) = None [owise] . --- Error case: If the list is empty or position is out of bounds.

-------------------------------------------------------------

 op get-prog : QConf -> Prog .
 eq get-prog(< C, Q >) = C .
 eq get-prog(Q1) = NoneProg .

 op get-qubit : QConf -> Qubit .
 eq get-qubit(< C, Q >) = Q .
 eq get-qubit(Q1) = Q1 .

 --------------------------------------------------------------------------------------------

op noList : -> ListQConf [ctor].
eq (CS, noList) = noList .


--- Main function to append only lists containing qubits.
  op append-qubits : ListQConf -> ListQConf .

eq append-qubits(nilList) = nilList .
ceq append-qubits(Q, Tail) = (Q, append-qubits(Tail)) 
if Q : Qubit .

ceq append-qubits(CS, Tail) = noList 
if CS : Conf .

----------------------------------------------------------------------


op generate-seq : Prog ListQConf ListQConf Nat Nat -> ListQConf . --- Recursive function to construct the resulting list.


eq smallStep(< C1 ; C2, Q1 >) = generate-seq(C2, nilList, smallStep(< C1, Q1 >), 1, count-qconf(smallStep(< C1, Q1 >))) .  --- Generalized rule for multiple configurations.

eq < NoneProg ; C2 , Q > = < C2, Q > .
---eq ( < C , Q > , nilList ) = < C, Q > .

ceq generate-seq(C2, Accum, Tail, Index, Max) =
    (< get-prog(get-qconf(Index, Tail)) ; C2 , get-qubit(get-qconf(Index, Tail)) > , Accum)
    if Index == Max .                          --- Base case: Add the last configuration to the result and stop.

 
  ceq generate-seq(C2, Accum, Tail, Index, Max) =
    generate-seq(
      C2,
      (< get-prog(get-qconf(Index, Tail)) ; C2 , get-qubit(get-qconf(Index, Tail)) > , Accum),
      Tail,
      Index + 1,
      Max
    ) if Index < Max .                        --- Recursive case: Add the current configuration and proceed to the next.

-------------------------------------------------------------------------

--- Parallel composition

eq smallStep(< C1 || C2, Q1 >) = (generate-parL(C2, nilList, smallStep(< C1, Q1 >), 1, count-qconf(smallStep(< C1, Q1 >))), generate-parR(C1, nilList, smallStep(< C2, Q1 >), 1, count-qconf(smallStep(< C2, Q1 >)))) .
op generate-parL : Prog ListQConf ListQConf Nat Nat -> ListQConf . --- Recursive function to construct the resulting list.
op generate-parR : Prog ListQConf ListQConf Nat Nat -> ListQConf . --- Recursive function to construct the resulting list.

eq < NoneProg || C2 , Q > = < C2, Q > .
eq < C2 || NoneProg , Q > = < C2, Q > .
---eq ( < C , Q > , nilList ) = < C, Q > .

ceq generate-parL(C2, Accum, Tail, Index, Max) =
    (< get-prog(get-qconf(Index, Tail)) || C2 , get-qubit(get-qconf(Index, Tail)) > , Accum)
    if Index == Max .                          --- Base case: Add the last configuration to the result and stop.

 
ceq generate-parL(C2, Accum, Tail, Index, Max) =
    generate-parL(
      C2,
      (< get-prog(get-qconf(Index, Tail)) || C2 , get-qubit(get-qconf(Index, Tail)) > , Accum),
      Tail,
      Index + 1,
      Max
    ) if Index < Max .                        --- Recursive case: Add the current configuration and proceed to the next.


ceq generate-parR(C1, Accum, Tail, Index, Max) =
    (< get-prog(get-qconf(Index, Tail)) || C1 , get-qubit(get-qconf(Index, Tail)) > , Accum)
    if Index == Max .                          --- Base case: Add the last configuration to the result and stop.

 
ceq generate-parR(C1, Accum, Tail, Index, Max) =
    generate-parR(
      C1,
      (< get-prog(get-qconf(Index, Tail)) || C1 , get-qubit(get-qconf(Index, Tail)) > , Accum),
      Tail,
      Index + 1,
      Max
    ) if Index < Max .                        --- Recursive case: Add the current configuration and proceed to the next.



--------------------------------------------------------------------------------------------------------


--- Non-deterministic choice

eq smallStep(< C1 + C2, Q1 >) = (smallStep(< C1, Q1 >) , smallStep(< C2, Q1 >)) .

-------------------------------------------------------------------------------------------------------

----big step

ceq bigStep(CS , Tail) = ((bigStep(CS)) , (bigStep(Tail)))
 if count-qconf(Tail) >= 1 .

eq bigStep(nilList) = nilList .
eq bigStep(Q1) = Q1 . ---bigStep of qubit is the same qubit 

ceq bigStep(< C, Q >) = smallStep(< C, Q >) 
 if append-qubits(smallStep(< C, Q >)) =/= noList .  ---refl, if smallStep of <C,Q> is qubit

ceq bigStep(< C1, Q1 >) = (Q3) 
 if < C2, Q2 > := smallStep(< C1, Q1 >) /\ Q3 := bigStep(< C2, Q2 >) . ---trans, if smallStep of <C,Q> is configuration

 eq bigStep(Tail) = bigStep(smallStep(Tail)) [owise] .

--------------------------------------------------------------------------------------------------------------
---await command    

ceq smallStep(< (await(n, d)), (q[NL1 N NL2]: u1) >) = (< (await(n, d)), (q[NL1 N NL2]: u1) >) 
 if get-vector(u1, n) = |0> .   ---aw3

eq smallStep(< (await(n, d)), (q[NL1 N NL2]: u1) >) = (bigStep(< d, (q[NL1 N NL2]: u1) >)).tozero(n) [owise] .
   ---aw2




---smallStep

ceq smallStep(CS , Tail) = ((smallStep(CS)) , (smallStep(Tail)))
 if count-qconf(Tail) >= 1 .

---eq smallStep(nilList) = nilList .  ---Empty list produces no configurations


--- Removing duplicate elements in a ListQConf
op rmvRep : ListQConf -> ListQConf .

--- Base case: an empty list remains empty
eq rmvRep(nilList) = nilList .

--- Recursive case: remove duplicates iteratively
eq rmvRep((Q1 , Tail)) = (Q1, rmvRep(removeQConf(Q1, Tail))) .

--- Helper function to remove all occurrences of a QConf from a ListQConf
op removeQConf : Qubit ListQConf -> ListQConf .
eq removeQConf(Q, nilList) = nilList .

ceq removeQConf((q[NL1 N NL2]: V1), ((q[NL3 N1 NL4]: V2), Tail)) = removeQConf((q[NL1 N NL2]: V1), Tail) 
 if V1 == V2 /\ N == N1 /\ NL1 == NL3 /\ NL2 == NL4 .

  
eq removeQConf(Q, (Q1, Tail)) = (Q1, removeQConf(Q, Tail)) [owise] .


endfm    
